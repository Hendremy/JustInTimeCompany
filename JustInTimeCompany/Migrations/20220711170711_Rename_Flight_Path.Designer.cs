// <auto-generated />
using System;
using JustInTimeCompany.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustInTimeCompany.Migrations
{
    [DbContext(typeof(JITCDbContext))]
    [Migration("20220711170711_Rename_Flight_Path")]
    partial class Rename_Flight_Path
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("LastCheckUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastCheckUpDate = new DateTime(11, 7, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            LastCheckUpDate = new DateTime(11, 7, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ModelId = 2
                        },
                        new
                        {
                            Id = 3,
                            LastCheckUpDate = new DateTime(11, 7, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ModelId = 3
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.AircraftModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AircraftModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eurocopter AS 355 F1/F2 Ecureuil III",
                            PassengerCapacity = 5,
                            Speed = 220
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bell 206 JetRanger",
                            PassengerCapacity = 4,
                            Speed = 190
                        },
                        new
                        {
                            Id = 3,
                            Name = "Robinson R44 Raven II",
                            PassengerCapacity = 3,
                            Speed = 190
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 50.63583079,
                            Longitude = 5.4393315759999998,
                            Name = "Aéroport de Liège"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 50.900829729999998,
                            Longitude = 4.4839980639999997,
                            Name = "Aéroport de Bruxelles-National"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 51.193165894000003,
                            Longitude = 2.8581632340000001,
                            Name = "Aéroport d'Ostende-Bruges"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 50.455998176000001,
                            Longitude = 4.4516648600000002,
                            Name = "Aéroport de Charleroi Bruxelles-Sud"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Booking", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("FlightId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Engine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Rolls Royce",
                            Model = "250-C20F",
                            Type = "Turbine"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Lycoming",
                            Model = "IO-540",
                            Type = "Piston"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.EngineInAircraft", b =>
                {
                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("EngineId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("EngineInAircraft");

                    b.HasData(
                        new
                        {
                            EngineId = 1,
                            ModelId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            EngineId = 1,
                            ModelId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            EngineId = 2,
                            ModelId = 3,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("PathFromId")
                        .HasColumnType("int");

                    b.Property<int>("PathToId")
                        .HasColumnType("int");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("PilotId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("PathFromId", "PathToId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActualScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("DelayJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualScheduleId");

                    b.HasIndex("FlightInstanceId")
                        .IsUnique();

                    b.ToTable("FlightReport");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Path", b =>
                {
                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Landing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TakeOff")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.AircraftModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Booking", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Flight", "FlightInstance")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FlightInstance");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.EngineInAircraft", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Engine", "Engine")
                        .WithMany("EngineInAircraft")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.AircraftModel", "Model")
                        .WithMany("Engines")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Aircraft", "Aircraft")
                        .WithMany("FlightInstances")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Pilot", "Pilot")
                        .WithMany("FlightInstances")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Path", "Path")
                        .WithMany("FlightInstances")
                        .HasForeignKey("PathFromId", "PathToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Path");

                    b.Navigation("Pilot");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightReport", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Schedule", "ActualSchedule")
                        .WithMany()
                        .HasForeignKey("ActualScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Flight", "FlightInstance")
                        .WithOne("FlightReport")
                        .HasForeignKey("JustInTimeCompany.Models.FlightReport", "FlightInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActualSchedule");

                    b.Navigation("FlightInstance");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Path", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Airport", "From")
                        .WithMany("OutgoingFlights")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Airport", "To")
                        .WithMany("IncomingFlights")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.AircraftModel", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Airport", b =>
                {
                    b.Navigation("IncomingFlights");

                    b.Navigation("OutgoingFlights");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Engine", b =>
                {
                    b.Navigation("EngineInAircraft");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FlightReport")
                        .IsRequired();
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Path", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Pilot", b =>
                {
                    b.Navigation("FlightInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
