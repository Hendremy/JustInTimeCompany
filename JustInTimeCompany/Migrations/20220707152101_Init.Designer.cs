// <auto-generated />
using System;
using JustInTimeCompany.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustInTimeCompany.Migrations
{
    [DbContext(typeof(JITCDbContext))]
    [Migration("20220707152101_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("LastRevision")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.AircraftModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AircraftModels");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Booking", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FlightInstanceId")
                        .HasColumnType("int");

                    b.HasKey("FlightId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightInstanceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AircraftModelId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AircraftModelId");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("FlightFromId")
                        .HasColumnType("int");

                    b.Property<int>("FlightToId")
                        .HasColumnType("int");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("PilotId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("FlightFromId", "FlightToId");

                    b.ToTable("FlightInstance");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActualScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("DelayJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualScheduleId");

                    b.HasIndex("FlightInstanceId")
                        .IsUnique();

                    b.ToTable("FlightReport");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Landing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TakeOff")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.AircraftModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Booking", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.FlightInstance", "FlightInstance")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FlightInstance");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Engine", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.AircraftModel", null)
                        .WithMany("Engines")
                        .HasForeignKey("AircraftModelId");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Airport", "From")
                        .WithMany("OutgoingFlights")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Airport", "To")
                        .WithMany("IncomingFlights")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightInstance", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Aircraft", "Aircraft")
                        .WithMany("FlightInstances")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Pilot", "Pilot")
                        .WithMany("FlightInstances")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Flight", "Flight")
                        .WithMany("FlightInstances")
                        .HasForeignKey("FlightFromId", "FlightToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Flight");

                    b.Navigation("Pilot");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightReport", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Schedule", "ActualSchedule")
                        .WithMany()
                        .HasForeignKey("ActualScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.FlightInstance", "FlightInstance")
                        .WithOne("FlightReport")
                        .HasForeignKey("JustInTimeCompany.Models.FlightReport", "FlightInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActualSchedule");

                    b.Navigation("FlightInstance");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Aircraft", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.AircraftModel", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Airport", b =>
                {
                    b.Navigation("IncomingFlights");

                    b.Navigation("OutgoingFlights");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightInstance", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FlightReport")
                        .IsRequired();
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Pilot", b =>
                {
                    b.Navigation("FlightInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
