@using JustInTimeCompany.Models.ViewModels
@model FlightFormViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf


@{
    ViewBag.Title = "Ajouter un vol";
    ViewBag.FormAction = "Create";
    ViewBag.ButtonValue = "Ajouter le vol";
}

<h1>Créer un vol</h1>

<partial name="_FlightForm" model=Model/>

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}



@section Scripts {
    <script>console.log('succes')</script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="module" src="~/js/getAirportDistance.js" ></script>
    <script type="module" src="~/js/getAvailablePilots.js" ></script>
    <script type="module">
        let from = document.getElementById("Flight_Path_FromId");
        let to = document.getElementById("Flight_Path_ToId");
        let takeOff = document.getElementById("Flight_Schedule_TakeOff");
        let landing = document.getElementById("Flight_Schedule_Landing");
        let distance = document.getElementById("airportDistance");
        let pilots = document.getElementById("");

        function airportChosen(){
            if(from.value > 0 && to.value > 0){
                let url = '@Url.Action("GetAirportDistance","Flight")'
                let token = '@GetAntiXsrfRequestToken()';
                getAirportDistance(from.value, to.value, url, token)
                .then(response => {
                    distance.innerText = `${response} km`;
                })
                .catch(error => {
                    distance.innerText = '0 km';
                });
            }
        }
        
        from.addEventListener('onchange', airportChosen);
        to.addEventListener('onchange', airportChosen);
        console.log("event ok");

        function scheduleChosen(){

        }

    </script>
}